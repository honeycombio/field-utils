AWSTemplateFormatVersion: "2010-09-09"
Description: Honeycomb.io Refinery Cluster 0.2

Parameters:
  # Required Parameters
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
  RefineryServerSubnets:
    Description: Provide a list of Subnet IDs for the Refinery Servers (must be within the specified VPC)
    Type: List<AWS::EC2::Subnet::Id>
  SSLCertificateARN:
    Description: SSL Certficate ARN for SSL Certficate
    Type: String
    MinLength: 10
    AllowedPattern: ^arn:aws:acm:[a-z]{2}-[a-z]+-\d{1}:[0-9]{12}:certificate/[a-zA-Z0-9-]+
  SSHKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  RedisPassword:
    Description: Redis Authentication Password (must be 16-128 characters, alphanumeric only)
    NoEcho: true
    Type: String
    MinLength: 16
    MaxLength: 128
    AllowedPattern: ^[0-9a-zA-Z]*$
  RefineryMetricsHoneycombAPIKey:
    Description: The Honeycomb API Key for Refinery Metrics and Logs (must not be a Classic key)
    NoEcho: true
    Type: String
    MinLength: 22
    MaxLength: 22
  AdminSecurityGroupId:
    Description: Select an existing Security Group in your VPC to define administrative ACLs (SSH, monitoring tools, etc) to the Refinery instances.
    Type: AWS::EC2::SecurityGroup::Id
  ContactEmail:
    Description: Contact email for Cloudwatch notifications and instance tagging
    Type: String
  ContactDept:
    Description: Contact department for billing purposes
    Type: String
  ###############################################################################
  # Performance Settings
  InstanceType:
    Description: EC2 Instance type for Refinery (ARM)
    Default: m6g.xlarge
    Type: String
    AllowedValues: [m6g.medium, m6g.large, m6g.xlarge, m6g.2xlarge, m6g.4xlarge, m6g.8xlarge,
      r6g.medium, r6g.large, r6g.xlarge, r6g.2xlarge, r6g.4xlarge, r6g.8xlarge, r6g.12xlarge,
      t4g.small, t4g.medium, t4g.large, t4g.xlarge, t4g.2xlarge]
  MaxRefineryInstances:
    Description: The maximum number of Refinery instances to launch. By default these will be launched as Spot (deeply discounted) instances.
    Type: Number
    Default: 3
  NumRefineryOnDemandInstances:
    Description: The number of On-Demand (non-spot/full-price) Refinery instances to launch. The rest up to MaxRefineryInstances will be spot instances. 0 to disable on-demand instances. Must be less than MaxRefineryInstances.
    Type: Number
    Default: 3
  RedisInstanceType:
    Description: EC2 Instance type for Elasticache (Low performance, t4g instance class recommended)
    Default: cache.t4g.small
    Type: String
    AllowedValues: [cache.t4g.micro, cache.t4g.small, cache.t4g.medium,
      cache.m6g.large, cache.m6g.xlarge]
  RedisNumReplicas:
    Description: Number of replicas per shard. 1 replica means HA, 0 means single node
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 5
  ###############################################################################
  # Security Settings
  LoadBalancerSubnets:
    Description: Provide a comma separated list of Subnet IDs for the load balancers (Leave blank to use the RefineryServerSubnets specified above)
    Type: CommaDelimitedList
    Default: ''
  RedisSubnets:
    Description: Provide a comma separated list of Subnet IDs for the Postgres database (Leave blank to use the RefineryServerSubnets specified above)
    Type: CommaDelimitedList
    Default: ''
  LoadBalancerScheme:
    Description: Network Scheme for the ELB
    Type: String
    Default: internet-facing
    AllowedValues:
    - 'internet-facing'
    - 'internal'
  LoadBalancerSecurityGroupId:
    Description: Supply a security group for your load balancer (leave blank to have it created for you, recommended).
    Type: String
    Default: ''
  RefinerySecurityGroupId:
    Description: Supply a security group for your Refinery frontends (leave blank to have it created for you, recommended).
    Type: String
    Default: ''
  RefineryServerAssociatePublicIpAddress:
    Description: Assign public IP addresses to the Refinery Servers or not
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  ###############################################################################
  # Optional Settings
  Route53HostedZone:
    Type: String
    Default: ''
    Description: Supply a Route 53 Hosted Zone name (eg. mydomain.com) for auto-creating a DNS record. Must NOT end in a dot. (Leave blank to disable)
  Route53RecordName:
    Type: String
    Default: 'refinery'
    Description: Supply a DNS record name that will be prepended to the Route 53 Hosted Zone
  Route53AdminRecordName:
    Type: String
    Default: 'refinery-admin'
    Description: Supply a DNS record name for the admin interface that will be prepended to the Route 53 Hosted Zone

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W2507
        - W4002
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required Parameters"
        Parameters:
          - VPC
          - RefineryServerSubnets
          - SSLCertificateARN
          - SSHKeyName
          - RedisPassword
          - RefineryMetricsHoneycombAPIKey
          - AdminSecurityGroupId
          - ContactEmail
          - ContactDept
      - Label:
          default: "Performance Settings"
        Parameters:
          - InstanceType
          - MaxRefineryInstances
          - NumRefineryOnDemandInstances
          - RedisInstanceType
          - RedisNumReplicas
      - Label:
          default: "Security Settings"
        Parameters:
          - LoadBalancerSubnets
          - RefineryServerAssociatePublicIpAddress
          - RedisSubnets
          - LoadBalancerScheme
          - LoadBalancerSecurityGroupId
          - RefinerySecurityGroupId
      - Label:
          default: "Optional Parameters"
        Parameters:
          - Route53HostedZone
          - Route53RecordName
          - Route53AdminRecordName

Conditions:
  CreateRoute53Record:
    !Not [!Equals [ !Ref Route53HostedZone, '' ] ]
  UseServerSubnetsForLoadBalancers:
    !Equals [ !Select [ 0, !Ref LoadBalancerSubnets], '' ]
  UseServerSubnetsForRedis:
    !Equals [ !Select [ 0, !Ref RedisSubnets], '' ]
  CreateLoadBalancerSecurityGroup:
    !Equals [ !Ref LoadBalancerSecurityGroupId, '' ]
  CreateRefinerySecurityGroup:
    !Equals [ !Ref RefinerySecurityGroupId, '' ]
  RedisHasAutomaticFailoverEnabled:
    !Not [!Equals [!Ref RedisNumReplicas, 0]]

Mappings:
  # To generate, run:
  # image-builder/generate-mappings.sh
  AMIRegionMap:
    eu-north-1:
      arm64: ami-00a43734574a73e80
    eu-west-3:
      arm64: ami-0128de4335814e1ef
    eu-west-2:
      arm64: ami-0cb4a5cf9825c2ea8
    eu-west-1:
      arm64: ami-022adc93f3acb2d5c
    ca-central-1:
      arm64: ami-0c80cca83c9e154c6
    eu-central-1:
      arm64: ami-0a98a180b6dbc7f28
    us-east-1:
      arm64: ami-012f44c1b7e42117c
    us-east-2:
      arm64: ami-0364b3af7c0b998e3
    us-west-1:
      arm64: ami-005a6ecee57d2dfde
    us-west-2:
      arm64: ami-02837b1d9fec984bf

Resources:
# Refinery AutoScale Group
#########################################################################################
  RefineryLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !FindInMap [AMIRegionMap, !Ref "AWS::Region", arm64]
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: !Ref RefineryServerAssociatePublicIpAddress
          Groups:
          - !If [CreateRefinerySecurityGroup , !Ref RefinerySecurityGroup, !Ref RefinerySecurityGroupId]
          - !Ref AdminSecurityGroupId
        EbsOptimized: true
        KeyName: !Ref SSHKeyName
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash -ex
            # Execute AWS::CloudFormation::Init
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource RefineryLaunchTemplate --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default: [refinery, monitoring, crude]
        refinery:
          commands:
            01_start_refinery:
              command: !Sub |
                export REDIS_HOST="${ReplicationGroup.PrimaryEndPoint.Address}"
                export REDIS_PORT="${ReplicationGroup.PrimaryEndPoint.Port}"
                export REDIS_PASSWORD="${RedisPassword}"
                export HONEYCOMB_API_KEY="${RefineryMetricsHoneycombAPIKey}"
                /usr/local/bin/configure-refinery.sh
        monitoring:
          files:
            /etc/otel-collector.env:
              content: !Sub |
                HNY_API_KEY="${RefineryMetricsHoneycombAPIKey}"
                HNY_DATASET="hostmetrics"
                OTEL_RESOURCE_ATTRIBUTES="service.name=refinery,deployment.environment=${AWS::StackName}"
          commands:
            03_otel_collector:
              command: |
                systemctl enable otel-collector
                systemctl start otel-collector
        crude:
          files:
            /etc/crude.env:
              content: !Sub |
                GIN_MODE=release
                HONEYCOMB_API_KEY="${RefineryMetricsHoneycombAPIKey}"
                OTEL_SERVICE_NAME="crude"
                AWS_REGION="${AWS::Region}"
                S3_BUCKET="${ConfigBucket}"
            /etc/cron.d/rules_fetch:
              content: !Sub |
                * * * * * root aws s3 cp s3://${ConfigBucket}/rules.toml /etc/refinery/rules.toml
          commands:
            01_crude:
              command: |
                systemctl enable crude
                systemctl start crude

  RefineryAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: lowest-price
          OnDemandBaseCapacity: !Ref NumRefineryOnDemandInstances
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref RefineryLaunchTemplate
            Version: !GetAtt RefineryLaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
      - !Ref RefineryTargetGroup
      - !Ref RefineryGrpcTargetGroup
      - !Ref RefineryAdminTargetGroup
      MaxSize: !Sub '${MaxRefineryInstances}'
      MinSize: !Sub '${MaxRefineryInstances}'
      DesiredCapacity: !Sub '${MaxRefineryInstances}'
      HealthCheckGracePeriod: 0
      HealthCheckType: ELB
      NotificationConfigurations:
      - TopicARN: !Ref AlertNotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-frontend
        PropagateAtLaunch: true
      - Key: X-Dept
        Value: !Ref ContactDept
        PropagateAtLaunch: true
      - Key: X-Contact
        Value: !Ref ContactEmail
        PropagateAtLaunch: true
      - Key: aws-apn-id
        Value: pc:4cs7oby7dg5rzww2ys7u09nd7
        PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref RefineryServerSubnets
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 2
        PauseTime: PT1M

  FrontendAutoScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref RefineryAutoScaleGroup
      Cooldown: '60'
      ScalingAdjustment: 1

  FrontendAutoScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref RefineryAutoScaleGroup
      Cooldown: '60'
      ScalingAdjustment: -1

  RefineryALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
      Subnets: !If [UseServerSubnetsForLoadBalancers, !Ref RefineryServerSubnets, !Ref LoadBalancerSubnets ]
      # IpAddressType: dualstack
      Scheme: !Ref LoadBalancerScheme
      Tags:
        - Key: Name
          Value: !Sub refinery-${AWS::StackName}
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: X-Dept
          Value: !Ref ContactDept
        - Key: X-Contact
          Value: !Ref ContactEmail

  RefineryALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        Certificates:
          - CertificateArn: !Ref SSLCertificateARN
        LoadBalancerArn: !Ref RefineryALB
        Port: 443
        Protocol: HTTPS
        SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
        DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RefineryTargetGroup

  RefineryGrpcListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref RefineryGrpcTargetGroup
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: content-type
            Values:
            - application/grpc
            - application/grpc-web
      ListenerArn: !Ref RefineryALBListener
      Priority: 1

  RefineryTargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
        HealthCheckIntervalSeconds: 10
        UnhealthyThresholdCount: 3
        HealthyThresholdCount: 2
        HealthCheckPath: /alive
        VpcId: !Ref VPC
        Port: 8080
        Protocol: HTTP
        Tags:
          - Key: X-Dept
            Value: !Ref ContactDept
          - Key: X-Contact
            Value: !Ref ContactEmail

  RefineryGrpcTargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
        VpcId: !Ref VPC
        Port: 9090
        Protocol: HTTP
        ProtocolVersion: GRPC
        HealthCheckIntervalSeconds: 10
        UnhealthyThresholdCount: 3
        HealthyThresholdCount: 2
        HealthCheckPath: /
        Tags:
          - Key: X-Dept
            Value: !Ref ContactDept
          - Key: X-Contact
            Value: !Ref ContactEmail

  RefineryAdminALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !Ref AdminSecurityGroupId
      Subnets: !If [UseServerSubnetsForLoadBalancers, !Ref RefineryServerSubnets, !Ref LoadBalancerSubnets ]
      # IpAddressType: dualstack
      Scheme: !Ref LoadBalancerScheme
      Tags:
        - Key: Name
          Value: !Sub refineryAdmin-${AWS::StackName}
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: X-Dept
          Value: !Ref ContactDept
        - Key: X-Contact
          Value: !Ref ContactEmail

  RefineryAdminALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        Certificates:
          - CertificateArn: !Ref SSLCertificateARN
        LoadBalancerArn: !Ref RefineryAdminALB
        Port: 443
        Protocol: HTTPS
        SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
        DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RefineryAdminTargetGroup

  RefineryAdminTargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
        HealthCheckIntervalSeconds: 10
        UnhealthyThresholdCount: 3
        HealthyThresholdCount: 2
        HealthCheckPath: /
        VpcId: !Ref VPC
        Port: 8000
        Protocol: HTTP
        TargetGroupAttributes:
          - Key: stickiness.enabled
            Value: 'true'
          - Key: stickiness.type
            Value: lb_cookie
        Tags:
          - Key: X-Dept
            Value: !Ref ContactDept
          - Key: X-Contact
            Value: !Ref ContactEmail


# Redis Cluster
#########################################################################################
  RedisParameterGroup:
    Type: 'AWS::ElastiCache::ParameterGroup'
    Properties:
      CacheParameterGroupFamily: 'redis6.x'
      Description: !Ref 'AWS::StackName'
      Properties: {}

  RedisSubnetGroupName:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      SubnetIds: !If [UseServerSubnetsForRedis , !Ref RefineryServerSubnets, !Ref RedisSubnets ]

  RedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        SourceSecurityGroupId: !If [CreateRefinerySecurityGroup , !Ref RefinerySecurityGroup, !Ref RefinerySecurityGroupId]

  ReplicationGroup:
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      ReplicationGroupDescription: !Ref 'AWS::StackName'
      AtRestEncryptionEnabled: true
      AuthToken: !Ref RedisPassword
      AutomaticFailoverEnabled: !If [RedisHasAutomaticFailoverEnabled, true, false]
      MultiAZEnabled: !If [RedisHasAutomaticFailoverEnabled, true, false]
      CacheNodeType: !Ref RedisInstanceType
      CacheParameterGroupName: !Ref RedisParameterGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroupName
      Engine: redis
      EngineVersion: '6.x'
      NotificationTopicArn: !Ref AlertNotificationTopic
      NumNodeGroups: 1
      ReplicasPerNodeGroup: !Ref RedisNumReplicas
      PreferredMaintenanceWindow: 'sat:07:00-sat:08:00'
      SecurityGroupIds:
      - !Ref RedisSecurityGroup
      SnapshotRetentionLimit: 0
      SnapshotWindow: '00:00-03:00'
      TransitEncryptionEnabled: true
    UpdatePolicy:
      UseOnlineResharding: true


# Route 53 Record
#########################################################################################
  RefineryLBDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      HostedZoneName: !Sub ${Route53HostedZone}.
      Name: !Sub ${Route53RecordName}.${Route53HostedZone}.
      Comment: !Sub Created by Cloudformation ${AWS::StackName}
      Type: CNAME
      TTL: 900
      ResourceRecords:
      - !GetAtt RefineryALB.DNSName

  RefineryAdminLBDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      HostedZoneName: !Sub ${Route53HostedZone}.
      Name: !Sub ${Route53AdminRecordName}.${Route53HostedZone}.
      Comment: !Sub Created by Cloudformation ${AWS::StackName}
      Type: CNAME
      TTL: 900
      ResourceRecords:
      - !GetAtt RefineryAdminALB.DNSName


# Monitoring
#########################################################################################
  ELB5XXExceeded:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub AppELB_5XX_Exceeded-${AWS::StackName}
      AlarmDescription: Alarms when an 5xx requests exceed a specified threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 60
      Statistic: Sum
      Threshold: 10
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt RefineryALB.LoadBalancerFullName

  FETGUnhealthyHosts:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub Refinery-FE-TG-Unhealthy-Hosts-${AWS::StackName}
      AlarmDescription: Alarms when UnHealthyHostCount is greater than threshold.
      AlarmActions: [!Ref AlertNotificationTopic]
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      Period: 60
      Statistic: Sum
      Threshold: 1
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt RefineryALB.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt RefineryTargetGroup.TargetGroupFullName

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub CPUAlarmHigh-${AWS::StackName}
      AlarmDescription: Scale up when CPU > 60% for 5 minutes
      AlarmActions: [!Ref FrontendAutoScaleUpPolicy]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 5
      Period: 60
      Statistic: Average
      Threshold: 60
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref RefineryAutoScaleGroup

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub CPUAlarmLow-${AWS::StackName}
      AlarmDescription: Scale down when CPU < 40% for 10 minutes
      AlarmActions: [!Ref FrontendAutoScaleDownPolicy]
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 10
      Period: 60
      Statistic: Average
      Threshold: 40
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref RefineryAutoScaleGroup


# Configuration Bucket and Access Rules
################################################################################
  ConfigBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  RefineryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        # Allow all actions to one bucket
        - Action: s3:*
          Effect: Allow
          Resource:
            - !Join ['', [ 'arn:aws:s3:::', !Ref ConfigBucket]]
            - !Join ['', [ 'arn:aws:s3:::', !Ref ConfigBucket, '/*' ]]
        # Allow ability to list all buckets
        - Action: s3:List*
          Effect: Allow
          Resource: arn:aws:s3:::*
      Roles:
      - !Ref RefineryRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref RefineryRole


# Security Groups
#########################################################################################
  RefinerySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateRefinerySecurityGroup
    Properties:
      GroupDescription: Ingress and Egress rules for Refinery
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
      SecurityGroupIngress:
      - FromPort: 8080
        IpProtocol: tcp
        SourceSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        ToPort: 8080
      - FromPort: 9090
        IpProtocol: tcp
        SourceSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        ToPort: 9090
      # for Crude (the admin interface, traffic comes from the RefineryAdminALB which is attached to the AdminSecurityGroupId)
      - FromPort: 8000
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref AdminSecurityGroupId
        ToPort: 8000
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Refinery-SG
      VpcId: !Ref VPC

  RefinerySecurityGroupPeerTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateRefinerySecurityGroup
    Properties:
      GroupId: !Ref RefinerySecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref RefinerySecurityGroup
      FromPort: 8081
      ToPort: 8081

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateLoadBalancerSecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Refinery Load Balancer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 9090
        IpProtocol: tcp
        ToPort: 9090
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ELB-SG
      VpcId: !Ref VPC

  AlertNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !Ref ContactEmail
          Protocol: email

# Outputs
################################################################################

Outputs:
  DNSName:
    Description: The DNS name of the load balancer
    Value: !If [CreateRoute53Record, !Sub "${Route53RecordName}.${Route53HostedZone}", !GetAtt RefineryALB.DNSName]
    Export:
      Name: !Sub "${AWS::StackName}-DNSName"
  RefineryURL:
    Description: The DNS name of the load balancer
    Value: !If [CreateRoute53Record, !Sub "https://${Route53RecordName}.${Route53HostedZone}", !GetAtt RefineryALB.DNSName]
    Export:
      Name: !Sub "${AWS::StackName}-RefineryURL"
  AdminURL:
    Description: The URL for the Admin web interface (only available to the Admin Security Group)
    Value: !If [CreateRoute53Record, !Sub "https://${Route53AdminRecordName}.${Route53HostedZone}", !GetAtt RefineryALB.DNSName]
    Export:
      Name: !Sub "${AWS::StackName}-RefineryAdminURL"
  StackName:
    Description: The name of this stack, as an export
    Value: !Ref AWS::StackName
